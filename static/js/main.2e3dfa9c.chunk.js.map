{"version":3,"sources":["context/ConfigContext.tsx","molecules/ConfigEditor.tsx","atoms/Button.tsx","atoms/DownloadRow.tsx","molecules/Dowloads.tsx","atoms/SvgPreview.tsx","atoms/JscadPreview.tsx","molecules/FilePreview.tsx","atoms/GenOption.tsx","Ergogen.tsx","atoms/Header.tsx","atoms/Footer.tsx","index.tsx","examples/absolem.ts"],"names":["ConfigContext","createContext","ConfigContextProvider","initialInput","children","useState","configInput","setConfigInput","error","setError","results","setResults","debug","setDebug","autoGen","setAutoGen","autoGen3D","setAutoGen3D","parseConfig","inputString","type","parsedConfig","JSON","parse","e","yaml","load","processInput","useCallback","debounce","textInput","a","options","pointsonly","inputConfig","points","units","variables","outlines","window","ergogen","process","m","console","log","toString","useEffect","Provider","value","useConfigContext","useContext","ConfigEditor","className","configContext","handleChange","height","defaultLanguage","onChange","theme","defaultValue","Button","styled","button","MediumButton","SmallButton","styledButton","size","rest","Row","div","FileName","Buttons","StyledButton","DownloadRow","fileName","extension","content","preview","setPreview","onClick","target","rel","download","href","URL","createObjectURL","Blob","DownloadsContainer","Downloads","downloads","demo","push","dump","dxf","Object","entries","name","outline","cases","caseObj","stl","pcbs","pcb","map","i","startsWith","InvertedImage","img","StyledPanZoom","PanZoom","SvgPreview","svg","width","enableBoundingBox","src","encodeURIComponent","alt","StyledOpenJSCAD","OpenJSCAD","JscadPreview","previewContent","jscadScript","style","wrapperDiv","viewerCanvas","React","memo","FilePreview","previewKey","previewExt","split","slice","renderFilePreview","GenOption","optionId","label","setSelected","checked","id","htmlFor","EditorContainer","FlexContainer","FlexColumn","Error","StyledFilePreview","StyledConfigEditor","OptionContainer","Ergogen","setPreviewKey","forEach","key","onInputChange","inputValue","onMenuClose","onMenuOpen","HeaderContainer","LinkContainer","H2Gradient","h2","Header","FooterContainer","Footer","version","AppContainer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e3dfa9c.chunk.js","sourcesContent":["import React, {createContext, Dispatch, SetStateAction, useCallback, useContext, useEffect, useState} from 'react';\nimport { DebouncedFunc } from \"lodash-es\";\nimport yaml from \"js-yaml\";\nimport debounce from \"lodash.debounce\";\n\ntype Props = {\n    initialInput: string,\n    children: React.ReactNode[] | React.ReactNode,\n};\n\ntype Results = { [key: string]: any|Results };\n\ntype ContextProps = {\n    configInput: string,\n    setConfigInput: Dispatch<SetStateAction<string>>,\n    processInput: DebouncedFunc<(textInput: string, options?: ProcessOptions) => Promise<void>>,\n    error: string | null,\n    results: Results | null,\n    debug: boolean,\n    setDebug: Dispatch<SetStateAction<boolean>>,\n    autoGen: boolean,\n    setAutoGen: Dispatch<SetStateAction<boolean>>,\n    autoGen3D: boolean,\n    setAutoGen3D: Dispatch<SetStateAction<boolean>>\n};\n\ntype ProcessOptions = {\n    pointsonly: boolean\n};\n\nexport const ConfigContext = createContext<ContextProps | null>(null);\n\nconst ConfigContextProvider = ({initialInput, children}: Props) => {\n    const [configInput, setConfigInput] = useState<string>(initialInput);\n    const [error, setError] = useState<string|null>(null);\n    const [results, setResults] = useState<Results|null>(null);\n    const [debug, setDebug] = useState<boolean>(true);\n    const [autoGen, setAutoGen] = useState<boolean>(true);\n    const [autoGen3D, setAutoGen3D] = useState<boolean>(false);\n\n\n    const parseConfig = (inputString: string) => {\n        let type = 'UNKNOWN';\n        let parsedConfig = null;\n\n        try {\n            parsedConfig = JSON.parse(inputString);\n            type = 'JSON';\n        } catch (e: unknown) {\n            // Input is not valid JSON\n        }\n\n        try {\n            parsedConfig = yaml.load(inputString);\n            type = 'YAML';\n        } catch (e: unknown) {\n            // Input is not valid YAML\n        }\n\n        return [type, parsedConfig]\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const processInput = useCallback(\n        debounce(async (textInput: string, options: ProcessOptions = { pointsonly: true }) => {\n            let results = null;\n            let inputConfig: string|{} = textInput;\n            const [,parsedConfig] = parseConfig(textInput);\n\n            setError(null);\n\n            // When running this as part of onChange we only send 'points', 'units' and 'variables' to generate a preview\n            // If there is no 'points' key we send the input to Ergogen as-is, it could be KLE or invalid.\n            if (parsedConfig?.points && options?.pointsonly) {\n                inputConfig = {\n                    points: {...parsedConfig?.points},\n                    units: {...parsedConfig?.units},\n                    variables: {...parsedConfig?.variables},\n                    outlines: {...parsedConfig?.outlines}\n                };\n            }\n\n            try {\n                results = await window.ergogen.process(\n                    inputConfig,\n                    debug, // debug\n                    (m: string) => console.log(m) // logger\n                );\n            } catch (e: unknown) {\n                if(!e) return;\n\n                if (typeof e === \"string\"){\n                    setError(e);\n                }\n                if (typeof e === \"object\"){\n                    // @ts-ignore\n                    setError(e.toString());\n                }\n                return;\n            }\n\n            setResults(results);\n\n        }, 300),\n        [window.ergogen]\n    );\n\n    useEffect(() => {\n        if(autoGen) {\n            processInput(configInput, { pointsonly: !autoGen3D });\n        }\n    }, [configInput, processInput]);\n\n\n    return (\n        <ConfigContext.Provider\n            value={ {\n                configInput,\n                setConfigInput,\n                processInput,\n                error,\n                results,\n                debug,\n                setDebug,\n                autoGen,\n                setAutoGen,\n                autoGen3D,\n                setAutoGen3D\n            } }\n        >\n            { children }\n        </ConfigContext.Provider>\n    );\n};\n\nexport default ConfigContextProvider;\n\nexport const useConfigContext = () => useContext(ConfigContext);","import Editor from \"@monaco-editor/react\";\nimport React, {useEffect} from \"react\";\nimport {useConfigContext} from \"../context/ConfigContext\";\n\ntype Props = {\n  className?: string\n};\n\nconst ConfigEditor = ({className}: Props) => {\n    const configContext = useConfigContext();\n\n    // @ts-ignore\n    const {configInput, setConfigInput} = configContext;\n\n    const handleChange = async (textInput: string | undefined) => {\n        if(!textInput) return null;\n\n        setConfigInput(textInput);\n    }\n\n    useEffect(() => {\n        handleChange(configInput);\n    }, []);\n\n    return (\n        <div className={className}>\n            <Editor\n                height=\"70vh\"\n                defaultLanguage=\"JSON\"\n                onChange={handleChange}\n                value={configInput}\n                theme={\"vs-dark\"}\n                defaultValue={configInput}\n            />\n        </div>\n    );\n}\n\nexport default ConfigEditor;","import React from 'react';\nimport styled from \"styled-components\";\n\ntype Props = {\n    size?: string,\n    children: React.ReactNode,\n    onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined;\n};\n\nconst Button = styled.button`\n  display: inline-block;\n  border: none;\n  padding: 1rem 2rem;\n  margin: 0;\n  text-decoration: none;\n  background-image: linear-gradient(320deg, #70c3d7 0%, #42aca2 100%);\n  color: #ffffff;\n  font-family: sans-serif;\n  font-size: 1.2rem;\n  cursor: pointer;\n  text-align: center;\n  transition: all 50ms ease-in-out,\n  transform 150ms ease;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n\n  &:hover {\n    background-image: linear-gradient(320deg, #66b1c6 0%, #3ba096 100%);\n  }\n\n  &:active {\n    transform: scale(0.98);\n    outline: 2px solid #fff;\n    outline-offset: -5px;\n  }\n`;\n\nconst MediumButton = styled(Button)`\n    padding: 0.7rem 1.4rem;\n    font-size: 1rem;\n`;\n\nconst SmallButton  = styled(Button)`\n    padding: 0.4rem 0.8rem;\n    font-size: 0.8rem;\n`;\n\nconst styledButton = ({size, ...rest}: Props): JSX.Element => {\n    switch(size){\n        case \"sm\":\n        case \"small\":\n            return <SmallButton {...rest}/>;\n        case \"md\":\n        case \"medium\":\n            return <MediumButton {...rest}/>;\n        case \"lg\":\n        case \"large\":\n        default:\n            return <Button {...rest}/>;\n    }\n};\n\nexport default styledButton;","import Button from \"./Button\";\nimport styled from \"styled-components\";\n\ntype Props = {\n    fileName: string,\n    extension: string,\n    content: string,\n    preview?: string,\n    setPreview: (preview: string) => void\n};\n\nconst Row = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 0.5em\n`;\n\nconst FileName = styled.div`\n`;\n\nconst Buttons = styled.div`\n    \n`;\n\nconst StyledButton = styled(Button)`\nmargin-right: 0.5em;\n`;\n\nconst DownloadRow = ({fileName, extension, content, preview, setPreview}: Props): JSX.Element => {\n    return (\n        <Row>\n            <FileName>{fileName}.{extension}</FileName>\n            <Buttons>\n                {preview && <StyledButton size={\"small\"} onClick={()=>setPreview(preview)}>Preview</StyledButton>}\n                <a target={\"_blank\"}\n                   rel={\"noreferrer\"}\n                   download={`${fileName}.${extension}`}\n                   href={window.URL.createObjectURL(new Blob([content], {type: \"octet/stream\"}))}>\n                    <Button size={\"small\"}>Download</Button>\n                </a>\n            </Buttons>\n        </Row>\n    );\n};\n\nexport default DownloadRow;","import DownloadRow from \"../atoms/DownloadRow\";\nimport yaml from 'js-yaml';\nimport styled from \"styled-components\";\nimport {useConfigContext} from \"../context/ConfigContext\";\nimport {Dispatch, SetStateAction} from \"react\";\n\nconst DownloadsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n`;\n\ntype Props = {\n    setPreview: Dispatch<SetStateAction<string>>\n};\n\ntype DownloadObj = {\n    fileName: string,\n    extension: string,\n    content: string,\n    preview?: string,\n};\n\ntype DownloadArr = Array<DownloadObj>;\n\nconst Downloads = ({setPreview}: Props) => {\n    let downloads: DownloadArr = [];\n    const configContext = useConfigContext();\n    if(!configContext) return null;\n\n    const {configInput, results} = configContext;\n\n    if (results?.demo) {\n        downloads.push({\n                fileName: 'raw',\n                extension: 'txt',\n                content: configInput\n            }, {\n                fileName: 'canonical',\n                extension: 'yaml',\n                content: yaml.dump(results.points)\n            },\n            {\n                fileName: 'demo',\n                extension: 'dxf',\n                content: results?.demo?.dxf,\n                preview: \"demo.svg\"\n            },\n            {\n                fileName: 'points',\n                extension: 'yaml',\n                content: yaml.dump(results.points)\n            },\n            {\n                fileName: 'units',\n                extension: 'yaml',\n                content: yaml.dump(results.units)\n            });\n    }\n\n    if (results?.outlines) {\n        for (const [name, outline] of Object.entries(results.outlines)) {\n            downloads.push(\n                {\n                    fileName: name,\n                    extension: 'dxf',\n                    // @ts-ignore\n                    content: outline.dxf,\n                    preview: `outlines.${name}.svg`\n                }\n            )\n        }\n\n    }\n\n    if (results?.cases) {\n        for (const [name, caseObj] of Object.entries(results.cases)) {\n            downloads.push(\n                {\n                    fileName: name,\n                    extension: 'stl',\n                    // @ts-ignore\n                    content: caseObj.stl,\n                    preview: `cases.${name}.jscad`\n                }\n            )\n        }\n\n    }\n\n    if (results?.pcbs) {\n        for (const [name, pcb] of Object.entries(results.pcbs)) {\n            downloads.push(\n                {\n                    fileName: name,\n                    extension: 'kicad_pcb',\n                    // @ts-ignore\n                    content: pcb\n                }\n            )\n        }\n\n    }\n\n\n\n    return (\n      <DownloadsContainer>\n          <h3>Downloads</h3>\n          {\n              downloads.map(\n                  (download, i) => {\n                      if (download.fileName.startsWith(\"_\")) return false;\n\n                      return <DownloadRow key={i} {...download} setPreview={setPreview}/>;\n                  }\n              )\n          }\n      </DownloadsContainer>\n  );\n};\n\n      export default Downloads;","import styled from \"styled-components\";\n// @ts-ignore\nimport { PanZoom } from 'react-easy-panzoom';\n\ntype Props = {\n  svg: string,\n  width: number | string,\n  height: number | string\n};\n\nconst InvertedImage = styled.img`\n      filter: invert();\n      -webkit-user-drag: none;\n      -khtml-user-drag: none;\n      -moz-user-drag: none;\n      -o-user-drag: none;\n      user-drag: none;\n`;\n\nconst StyledPanZoom = styled(PanZoom)`\n  overflow: hidden;\n  border: 1px solid #a8a8a8;\n\n  &:focus-visible {\n    outline: none;\n  }\n`;\n\nconst SvgPreview = ({svg, width, height}: Props): JSX.Element => (\n    <StyledPanZoom enableBoundingBox={true}>\n        <InvertedImage\n            width={width || '100%'}\n            height={height || '100%'}\n            src={`data:image/svg+xml;utf8,${encodeURIComponent(svg)}`}\n            alt={'Ergogen SVG Output preview'}\n        />\n    </StyledPanZoom>\n);\n\nexport default SvgPreview;","import React from 'react';\nimport styled from \"styled-components\";\nimport {OpenJSCAD} from \"openjscad-react\";\n\ntype Props = {\n    previewContent: string\n};\n\nconst StyledOpenJSCAD = styled(OpenJSCAD)`\n  width: 100%;\n  height: 400px;\n`;\n\nconst JscadPreview = ({previewContent}: Props): JSX.Element => (\n    <StyledOpenJSCAD\n         jscadScript={previewContent}\n         style={{\n             wrapperDiv: {'height': '100%', 'width': '100%'},\n             viewerCanvas: {'height': '400px', 'width': '100%'},\n         }}\n    />\n);\n\nexport default React.memo(JscadPreview);","import SvgPreview from \"../atoms/SvgPreview\";\nimport JscadPreview from \"../atoms/JscadPreview\";\n\ntype Props = {\n    previewKey: string,\n    previewContent: string,\n    width?: number | string,\n    height?: number | string,\n    className?: string\n};\n\nconst FilePreview = ({previewKey, previewContent, width = '100%', height = '100%', className}: Props) => {\n    const previewExt = previewKey.split(\".\").slice(-1)[0];\n\n    const renderFilePreview = (previewExt: string) => {\n        switch (previewExt) {\n            case 'svg':\n                return (\n                    <SvgPreview svg={previewContent} width={width} height={height}/>\n                )\n            case 'jscad':\n                return (\n                    <JscadPreview previewContent={previewContent}/>\n                )\n            default:\n                return <></>;\n        }\n    };\n\n    return (\n        <div className={className}>\n            {renderFilePreview(previewExt)}\n        </div>\n    );\n}\n\nexport default FilePreview;","import React, {Dispatch, SetStateAction} from \"react\";\n\ntype Props = {\n  optionId: string;\n  label: React.ReactNode;\n  checked: boolean;\n  setSelected: Dispatch<SetStateAction<boolean>>;\n};\n\nconst GenOption = ({optionId, label, setSelected, checked}: Props): JSX.Element => {\n    return (\n        <span>\n            <input\n                type={\"checkbox\"}\n                id={optionId}\n                checked={checked}\n                onChange={(e)=>setSelected(e.target.checked)}\n            />\n            <label htmlFor={optionId}>{label}</label>\n        </span>\n    );\n};\n\nexport default GenOption;","import {useState} from \"react\";\nimport styled from \"styled-components\";\n\nimport ConfigEditor from \"./molecules/ConfigEditor\";\nimport Downloads from \"./molecules/Dowloads\";\nimport FilePreview from \"./molecules/FilePreview\";\n\nimport {useConfigContext} from \"./context/ConfigContext\";\nimport Button from \"./atoms/Button\";\nimport Select from \"react-select/base\";\nimport GenOption from \"./atoms/GenOption\";\n\nconst EditorContainer = styled.div`\n  position: relative;\n  height: 80%;\n  display: flex;\n  flex-direction: column;\n  max-width: 33em;\n  width: 100%;\n  flex-grow: 1;\n\n  @media screen and (max-width: 1000px) {\n    max-width: unset;\n  }\n`;\n\n\nconst FlexContainer = styled.div`\n  display: flex;\n  flex-flow: wrap;\n\n  @media screen and (max-width: 1000px) {\n    flex-direction: column;\n  }\n`;\n\nconst FlexColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  flex-grow: 1;\n  flex-basis: 25em;\n  padding: 1em;\n`;\n\n\nconst Error = styled.div`\n  background: #ff6d6d;\n  color: #a31111;\n  padding: 1em;\n  margin: 0.5em 0 0.5em 0;\n  border: 1px solid #a31111;\n  border-radius: 0.3em;\n`;\n\nconst StyledFilePreview = styled(FilePreview)`\n  flex-grow: 1;\n`;\n\nconst StyledConfigEditor = styled(ConfigEditor)`\n  border: 3px solid grey;\n  border-radius: 0.3em;\n  height: 80%;\n  position: relative;\n`;\n\nconst OptionContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\n\nconst Ergogen = () => {\n    const [previewKey, setPreviewKey] = useState(\"demo.svg\");\n\n    const configContext = useConfigContext();\n    if (!configContext) return null;\n\n    const {\n        results,\n        error,\n        processInput,\n        configInput,\n        autoGen,\n        setAutoGen,\n        autoGen3D,\n        setAutoGen3D,\n        debug,\n        setDebug\n    } = configContext;\n\n    let previewContent = results;\n    // Walk through the JSON keys until we get the content of the desired previewKey\n    previewKey.split(\".\").forEach((key) => previewContent = previewContent?.[key]);\n\n    return (\n        <div>\n            <FlexContainer>\n                    <EditorContainer>\n                        <Select onChange={()=>{}} onInputChange={()=>{}} value={''} inputValue={''}  onMenuClose={()=>{}} onMenuOpen={()=>{}}/>\n                        <StyledConfigEditor />\n                        <Button onClick={()=>processInput(configInput, { pointsonly: false })}>Generate</Button>\n                        <OptionContainer>\n                            <GenOption optionId={'autogen'} label={'Auto-generate'} setSelected={setAutoGen} checked={autoGen}/>\n                            <GenOption optionId={'debug'} label={'Debug'} setSelected={setDebug} checked={debug}/>\n                            <GenOption optionId={'autogen3d'} label={<>Auto-gen 3D <small>(slow)</small></>} setSelected={setAutoGen3D} checked={autoGen3D}/>\n                        </OptionContainer>\n                        {error && <Error>{error.toString()}</Error>}\n                    </EditorContainer>\n\n                    <FlexColumn>\n                        <Downloads setPreview={setPreviewKey}/>\n                        {previewKey && typeof previewContent === 'string' &&\n                            <StyledFilePreview previewKey={previewKey} previewContent={previewContent}/>\n                        }\n                    </FlexColumn>\n            </FlexContainer>\n        </div>\n    );\n}\n\nexport default Ergogen;","import styled from \"styled-components\";\n\nconst HeaderContainer = styled.div`\n      width: 100%;\n      height: 4em;\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n    `;\n\nconst LinkContainer = styled.div`\n      a {\n        color: white;\n        text-decoration: none;\n        display: inline-block;\n        margin-right: 2em\n      }\n    `;\n\nconst H2Gradient = styled.h2`\n  display: inline;\n  background: #99d4d9;\n  background: linear-gradient(to right, #99d4d9 0%, #b9dbaf 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n`\n\nconst Header = (): JSX.Element => {\n    return (\n        <HeaderContainer>\n            <div>\n                <H2Gradient>Ergogen</H2Gradient>\n            </div>\n\n            <LinkContainer>\n                <a href=\"#\" rel=\"noreferrer\">\n                    {/*TODO fix*/}\n                    Intro\n                </a>\n                <a href=\"https://docs.ergogen.xyz/\" target=\"_blank\" rel=\"noreferrer\">\n                    Docs\n                </a>\n                <a href=\"https://discord.gg/nbKcAZB\" target=\"_blank\" rel=\"noreferrer\">\n                    Discord\n                </a>\n            </LinkContainer>\n        </HeaderContainer>\n    );\n}\n\nexport default Header;","import styled from \"styled-components\";\n\ndeclare global {\n    interface Window {\n        ergogen: any;\n    }\n}\n\nconst FooterContainer = styled.div`\n      display: flex;\n      margin-top: auto;\n      width: 100%;\n      align-items: center;\n      justify-content: space-between;\n      padding: 0 1em 0.5em 1em;\n      color: #FFFFFF;\n\n      a {\n        color: white;\n        text-decoration: none;\n      }\n`;\n\nconst Footer = (): JSX.Element => {\n    return (\n        <FooterContainer>\n            <div>\n                <a href=\"https://www.github.com/ergogen/ergogen\" target=\"_blank\" rel=\"noreferrer\">\n                    Ergogen by MrZealot\n                </a>\n            </div>\n            <div>\n                v{window.ergogen.version}\n            </div>\n            <div>\n                Powering the <a href=\"https://zealot.hu/absolem\" target=\"_blank\" rel=\"noreferrer\">Absolem</a>\n            </div>\n        </FooterContainer>\n    );\n}\n\nexport default Footer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from \"styled-components\";\nimport './index.css';\n\nimport Ergogen from './Ergogen';\nimport Header from \"./atoms/Header\";\nimport Footer from \"./atoms/Footer\";\nimport {Absolem} from \"./examples\";\nimport ConfigContextProvider from \"./context/ConfigContext\";\n\nconst AppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 1em;\n  color: #FFFFFF;\n  height: 100%;\n  width: 100%;\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n      <>\n          <AppContainer>\n              <Header/>\n              <ConfigContextProvider initialInput={Absolem}>\n                <Ergogen />\n              </ConfigContextProvider>\n              <Footer/>\n          </AppContainer>\n      </>\n  </React.StrictMode>,\n  document.getElementById('root')\n);","const Absolem: string = `points:\n  zones:\n    matrix:\n      anchor:\n        rotate: 5\n      columns:\n        pinky:\n        ring:\n          rotate: -5\n          origin: [-12, -19]\n          stagger: 12\n        middle:\n          stagger: 5\n        index:\n          stagger: -6\n        inner:\n          stagger: -2\n      rows:\n        bottom:\n        home:\n        top:\n    thumbfan:\n      anchor:\n        ref: matrix_inner_bottom\n        shift: [-7, -19]\n      columns:\n        near:\n        home:\n          spread: 21.25\n          rotate: -28\n          origin: [-11.75, -9]\n        far:\n          spread: 21.25\n          rotate: -28\n          origin: [-9.5, -9]\n      rows:\n        thumb:\n  rotate: -20\n  mirror:\n    ref: matrix_pinky_home\n    distance: 223.7529778`;\n\nexport default Absolem;"],"sourceRoot":""}